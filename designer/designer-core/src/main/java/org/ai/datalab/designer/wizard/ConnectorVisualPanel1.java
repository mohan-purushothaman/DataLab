/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.designer.wizard;

import java.util.ArrayList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.openide.util.ChangeSupport;
import org.openide.util.Lookup;
import org.ai.datalab.core.Data;
import org.ai.datalab.core.executor.ExecutorType;
import org.ai.datalab.designer.panels.VisualNodeProvider;
import org.ai.datalab.visual.impl.widget.DescriptiveExecutionUnit;


public final class ConnectorVisualPanel1 extends JPanel {

    /**
     * Creates new form ConnectorVisualPanel1
     */
    private final ChangeSupport changeSupport;
    private final ExecutorType type;
    private final Data sampleInput;
    private final ConnectorWizardPanel2 nextPanel;

    private final String[] displayNames;
    private final DescriptiveExecutionUnit existingNode;

    public ConnectorVisualPanel1(ChangeSupport changeSupport, ExecutorType type, Data sampleInput, ConnectorWizardPanel2 nextPanel, String[] displayNames, DescriptiveExecutionUnit existingNode) {
        this.changeSupport = changeSupport;
        this.type = type;
        this.sampleInput = sampleInput;
        this.nextPanel = nextPanel;
        this.displayNames = displayNames;
        this.existingNode = existingNode;
        initComponents();
        if (existingNode == null) {
            availableTypesActionPerformed(null);
        }
    }

    private ComboBoxModel<VisualNodeProvider> getComboBoxModel() {

        List<VisualNodeProvider> nodes = new ArrayList<VisualNodeProvider>();
        for (VisualNodeProvider n : Lookup.getDefault().lookupAll(VisualNodeProvider.class)) {
            if (n.getSupportedTypes().contains(type)) {
                nodes.add(n);
            }
        }

        return new DefaultComboBoxModel<VisualNodeProvider>(nodes.toArray(new VisualNodeProvider[0]));
    }

    @Override
    public String getName() {
        return "Select Connector";
    }

    public VisualNodeProvider getSelectedProvider() {
        return selectedProvider;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        availableTypes = new javax.swing.JComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ConnectorVisualPanel1.class, "ConnectorVisualPanel1.jLabel1.text")); // NOI18N

        availableTypes.setModel(getComboBoxModel());
        availableTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableTypesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(availableTypes, 0, 255, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(availableTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(269, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private VisualNodeProvider selectedProvider = null;
    private void availableTypesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableTypesActionPerformed
       
        selectedProvider = (VisualNodeProvider) availableTypes.getSelectedItem();
        nextPanel.setProvider(selectedProvider, sampleInput, displayNames);
        changeSupport.fireChange();
    }//GEN-LAST:event_availableTypesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox availableTypes;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
