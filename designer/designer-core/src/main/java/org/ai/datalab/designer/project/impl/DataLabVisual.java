/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.designer.project.impl;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Set;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import org.netbeans.api.actions.Editable;
import org.netbeans.api.actions.Savable;
import org.netbeans.api.visual.animator.SceneAnimator;
import org.netbeans.api.visual.widget.Scene;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewDescription;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.core.spi.multiview.MultiViewFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;
import org.ai.datalab.core.DataJob;
import org.ai.datalab.designer.DataLabGraphDesigner;
import org.ai.datalab.designer.DataLabUtil;
import org.ai.datalab.designer.graph.action.*;
import org.ai.datalab.designer.misc.ResourceValidatorUtil;
import org.ai.datalab.visual.impl.DataLabListenerGraph;

@MultiViewElement.Registration(
        displayName = "Visual Graph",
        iconBase = "org/ai/datalab/designer/project/datalab.gif",
        mimeType = DataLabDataObject.MIME_TYPE,
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "DataLabVisual",
        position = 100
)

public final class DataLabVisual extends JPanel implements MultiViewElement, Editable {

    private DataLabDataObject obj;
    private final JToolBar toolbar;
    private transient MultiViewElementCallback callback;
    private DataLabGraphDesigner graphScene;

    private final InstanceContent lkpContent;

    private final Lookup instanceLkp;

    private final InstanceContent actionMapContent;

    public DataLabVisual(Lookup lkp) throws FileNotFoundException, IOException {
        obj = lkp.lookup(DataLabDataObject.class);
        lkpContent = new InstanceContent();
        actionMapContent = new InstanceContent();

        instanceLkp = new AbstractLookup(lkpContent);

        assert obj != null;
        initComponents();
        this.toolbar = new JToolBar();
        try {
            graphScene = DataLabUtil.fromXml(lkpContent, this, obj.getPrimaryFile().asText());
            pane.setViewportView(graphScene.createView());
            initToolBar();

            //CloneableTopComponent.get
            obj.setSavable(new DataLabSavable(graphScene, obj));
            
            DataJob job=graphScene.createDataJob("Temp");
            
            if (!ResourceValidatorUtil.findMissingResources(job).isEmpty()) {
                        if(ResourceValidatorUtil.autoCorrectResourcesMismatches(job)){
                            edit();
                        }
                    }
            
        } catch (Exception e) {
            JTextPane p = new JTextPane();
            p.setEditable(false);
            StringWriter wr = new StringWriter();

            e.printStackTrace(new PrintWriter(wr));
            p.setText(wr.getBuffer().toString());
            pane.setViewportView(p);
        }

    }

    @Override
    public String getName() {
        return "DataLabVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(pane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane pane;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {

        if (graphScene == null) {
            return Lookup.EMPTY;
        }

        return new ProxyLookup(Lookups.exclude(obj.getLookup(), Node.class, ActionMap.class), Lookups.singleton(graphScene), instanceLkp, Lookups.fixed(actionMapContent));
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {

        return graphScene == null ? UndoRedo.NONE : graphScene.getUndoRedo();
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;

        ActionMap actionMap = callback.getTopComponent().getActionMap();
        actionMap.put("cut-to-clipboard", CutAction.INSTANCE);
        actionMap.put("copy-to-clipboard", CopyAction.INSTANCE);
        actionMap.put("paste-to-clipboard", PasteAction.INSTANCE);
        actionMapContent.add(actionMap);
        callback.updateTitle(obj.getName());
    }

    @Messages({
        "MSG_SaveModified_no_name=File is modified. Save?"
    })
    @Override
    public CloseOperationState canCloseElement() {

        final Savable sav = getLookup().lookup(Savable.class);
        if (sav != null) {
            AbstractAction save = new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        sav.save();
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            };
            Node n = obj.getLookup().lookup(Node.class);
            if (n != null) {
                save.putValue(Action.LONG_DESCRIPTION, "File "+n.getDisplayName()+" is modified. Save?"); 
            }
            return MultiViewFactory.createUnsafeCloseState(null, save, new AbstractAction() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    DataLabOpenable op = obj.getLookup().lookup(DataLabOpenable.class);
                    if (op != null) {
                        op.editorClosed();
                    }
                    obj.setUpdatedScene(null);
                }
            });
        }
        return CloseOperationState.STATE_OK;
    }

    private static final ImageIcon PROJECT_ICON = new ImageIcon(ImageUtilities.loadImage("org/ai/datalab/designer/project/impl/icons/run.png"));
    private static final ImageIcon ALIGN_ICON = new ImageIcon(ImageUtilities.loadImage("org/ai/datalab/designer/project/impl/icons/align.png"));
    private static final ImageIcon ZOOM_IN_ICON = new ImageIcon(ImageUtilities.loadImage("org/ai/datalab/designer/project/impl/icons/zoom_in.png"));
    private static final ImageIcon ZOOM_OUT_ICON = new ImageIcon(ImageUtilities.loadImage("org/ai/datalab/designer/project/impl/icons/zoom_out.png"));

    private void initToolBar() {
        JButton run = new JButton(PROJECT_ICON);
        run.setToolTipText("Execute");
        //TODO execute impl
        run.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    InstanceContent lkpContent = new InstanceContent();
                    ProgressTopComponent p = new ProgressTopComponent();
                    DataJob job = graphScene.createDataJob(obj.getName() + " Progress");


                    if (!ResourceValidatorUtil.findMissingResources(job).isEmpty()) {
                        if(ResourceValidatorUtil.autoCorrectResourcesMismatches(job)){
                            edit();
                        }
                    }
                    
                    if (!ResourceValidatorUtil.findMissingResources(job).isEmpty()) {
                        return;
                    }

                    DataLabListenerGraph g = new DataLabListenerGraph(job, graphScene.getTheme(), job.getName(), new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            p.open();
                            p.requestActive();
                        }
                    });

                    p.associateLookup(lkpContent);
                    p.setViewPortView(g.createView());
                    p.open();
                    p.requestActive();
                    g.startJob();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }

            }

        });

        toolbar.add(run);

        JButton align = new JButton(ALIGN_ICON);
        align.setToolTipText("Align");
        align.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                try {
                    graphScene.layoutScene();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }

            }

        });

        toolbar.add(align);

        final double zoomMultiplier = 1.2;

        class ZoomAction implements ActionListener {

            private final boolean zoomIn;

            public ZoomAction(boolean zoomIn) {
                this.zoomIn = zoomIn;
            }

            private Scene scene = graphScene;
            private boolean useAnimator = true;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (useAnimator) {
                    SceneAnimator sceneAnimator = scene.getSceneAnimator();
                    synchronized (sceneAnimator) {
                        double zoom = sceneAnimator.isAnimatingZoomFactor() ? sceneAnimator.getTargetZoomFactor() : scene.getZoomFactor();
                        if (!zoomIn) {
                            zoom /= zoomMultiplier;
                        }
                        if (zoomIn) {
                            zoom *= zoomMultiplier;
                        }
                        sceneAnimator.animateZoomFactor(zoom);
                    }
                } else {
                    double zoom = scene.getZoomFactor();
                    if (!zoomIn) {
                        zoom /= zoomMultiplier;
                    }
                    if (zoomIn) {
                        zoom *= zoomMultiplier;
                    }
                    scene.setZoomFactor(zoom);
                }
            }

        }

        JButton zoomIn = new JButton(ZOOM_IN_ICON);
        zoomIn.setToolTipText("Zoom In");
        zoomIn.addActionListener(new ZoomAction(true));

        toolbar.add(zoomIn);

        JButton zoomOut = new JButton(ZOOM_OUT_ICON);
        zoomOut.setToolTipText("Zoom Out");
        zoomOut.addActionListener(new ZoomAction(false));

        toolbar.add(zoomOut);

    }

    @Override
    public final void edit() {
        obj.setUpdatedScene(graphScene);
    }

}
