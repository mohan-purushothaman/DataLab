/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.designer.wiz.panels.misc;

import java.util.Comparator;
import java.util.List;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.ChildFactory;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.ai.datalab.core.adx.misc.MappingHelper;
import org.ai.datalab.core.adx.misc.SingleMapping;
import org.ai.datalab.core.executor.ExecutorType;
import org.ai.datalab.designer.wiz.ExecutorWizardIterator;
import org.ai.datalab.visual.impl.widget.DescriptiveExecutionUnit;
import org.openide.WizardDescriptor;

/**
 *
 * @author Mohan Purushothaman
 */
public class DataVisualView extends javax.swing.JPanel implements ExplorerManager.Provider {

    /**
     * Creates new form DataPanel
     */
    private final ExplorerManager manager;

    private final ExecutorWizardIterator iterator;
    
    private DescriptiveExecutionUnit unit;
    
    private final boolean readOnly;

    public DataVisualView(ExecutorWizardIterator iterator, String rootText,boolean readOnly) {
        manager = new ExplorerManager();
        this.readOnly=readOnly;
        this.iterator = iterator;
        this.rootText = rootText;
        initComponents();
    }
    
    public DataVisualView(ExecutorWizardIterator iterator, String rootText){
        this(iterator, rootText, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }

    private BeanTreeView view;
    private String rootText;

    
    public final void setDataFields(MappingHelper mapping) {
        setDataFields(rootText, mapping);
    }

    public DescriptiveExecutionUnit getUnit() {
        return unit;
    }
    
    
    

    public final void setDataFields(final String rootText, MappingHelper mapping) {
        init();

        manager.setRootContext(new AbstractNode(getChildren(mapping), Lookup.EMPTY) {

            @Override
            public String getHtmlDisplayName() {
                return rootText;
            }

        });

        revalidate();
    }

    public void setError(String error) {
        //idMapping = null;
        manager.setRootContext(new ErrorNode(error));
    }

    private void init() {
        if (view == null) {
            view = new BeanTreeView();
            removeAll();
            setLayout(new java.awt.BorderLayout());
            add(view, java.awt.BorderLayout.CENTER);
            setPreferredSize(new java.awt.Dimension(180, 220));
        }
    }

    void handleException(Exception ex) {
        iterator.getWizardDescriptor().putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, String.valueOf(ex.getLocalizedMessage()));
    }

    private Children getChildren(MappingHelper mapping) {
        return Children.create(new ChildFactory<SingleMapping>() {

            @Override
            protected Node createNodeForKey(SingleMapping entry) {

                DataNode node = new DataNode(DataVisualView.this, entry,readOnly);
                return node;
            }

            @Override
            protected boolean createKeys(List<SingleMapping> list) {
                
                for (Object entry : mapping.getIdList(ALPHABETICAL_MAPPING)) {
                    list.add((SingleMapping) entry);
                }
                return true;
            }

        }, true);
    }

    public final void refresh(DescriptiveExecutionUnit unit) {
        this.unit=unit;
        if (unit != null && unit.getProvidingType() != ExecutorType.WRITER) {
            setDataFields(unit.getMapping());
        }
    }
    
    public static final Comparator ALPHABETICAL_MAPPING = new Comparator<SingleMapping>() {
                    @Override
                    public int compare(SingleMapping o1, SingleMapping o2) {
                        return o1.getFieldKey().compareTo(o2.getFieldKey());
                    }
                };

}

class ErrorNode extends AbstractNode {

    private final String desc;

    public ErrorNode(String desc) {
        super(Children.LEAF, Lookup.EMPTY);
        this.desc = desc;
    }

    @Override
    public String getHtmlDisplayName() {
        return "<font color='#ff0000'>" + desc + "</font>";
    }

}
