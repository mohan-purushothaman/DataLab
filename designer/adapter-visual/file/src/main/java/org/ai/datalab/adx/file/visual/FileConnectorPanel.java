/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.adx.file.visual;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.Collection;
import java.util.Map.Entry;
import javax.swing.ComboBoxModel;
import javax.swing.text.JTextComponent;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.LineIterator;
import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.lang.text.StrLookup;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrSubstitutor;
import org.apache.commons.lang.text.StrTokenizer;
import org.netbeans.api.progress.ProgressHandle;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.ai.datalab.adx.file.FileAdapter;
import org.ai.datalab.adx.file.FilePatternParser;
import org.ai.datalab.core.Data;
import org.ai.datalab.core.adx.misc.MappingHelper;
import org.ai.datalab.core.adx.misc.ValueGroupingStrategy;
import org.ai.datalab.core.executor.ExecutorType;
import org.ai.datalab.core.misc.Type;
import org.ai.datalab.core.misc.TypeUtil;
import org.ai.datalab.core.resource.Resource;
import org.ai.datalab.core.resource.ResourcePool;
import org.ai.datalab.core.resource.ResourcePoolQualifier;
import org.ai.datalab.designer.editor.SimpleEditor;
import org.ai.datalab.designer.panels.VisualNodeValidator;
import org.ai.datalab.designer.util.ResourceVisualUtil;
import org.ai.datalab.designer.visual.resource.ResourceCreator;
import org.ai.datalab.designer.visual.resource.ResourceStore;
import org.ai.datalab.visual.DataUtil;
import org.ai.datalab.visual.impl.widget.DescriptiveExecutionUnit;

/**
 *
 * @author Mohan Purushothaman
 */
public class FileConnectorPanel extends VisualNodeValidator {

    /**
     * Creates new form FileConnectorPanel
     */
    private final ExecutorType type;
    private final Data sampleInput;

    private final JTextComponent contentArea;

    public FileConnectorPanel(ExecutorType type, Data sampleInput) {
        this.type = type;
        this.sampleInput = sampleInput;
        initComponents();
        contentArea = SimpleEditor.addVariableEditorPane(contentEditorPanel, sampleInput, null);
        jComboBox1ActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        newFile = new javax.swing.JButton();
        hasHeader = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        fileType = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        quote = new javax.swing.JComboBox<>();
        jComboBox1 = new javax.swing.JComboBox<>();
        contentEditorPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FileConnectorPanel.class, "FileConnectorPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(newFile, org.openide.util.NbBundle.getMessage(FileConnectorPanel.class, "FileConnectorPanel.newFile.text")); // NOI18N
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });

        hasHeader.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(hasHeader, org.openide.util.NbBundle.getMessage(FileConnectorPanel.class, "FileConnectorPanel.hasHeader.text")); // NOI18N
        hasHeader.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hasHeaderItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FileConnectorPanel.class, "FileConnectorPanel.jLabel2.text")); // NOI18N

        fileType.setModel(new javax.swing.DefaultComboBoxModel<FileType>(FileType.values()));
        fileType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fileTypeItemStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FileConnectorPanel.class, "FileConnectorPanel.jLabel3.text")); // NOI18N

        quote.setModel(new javax.swing.DefaultComboBoxModel(Quote.values()));
        quote.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                quoteItemStateChanged(evt);
            }
        });

        jComboBox1.setModel(getResourceComboBoxModel());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileType, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(quote, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(hasHeader)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(newFile)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(newFile)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fileType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(quote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hasHeader))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout contentEditorPanelLayout = new javax.swing.GroupLayout(contentEditorPanel);
        contentEditorPanel.setLayout(contentEditorPanelLayout);
        contentEditorPanelLayout.setHorizontalGroup(
            contentEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        contentEditorPanelLayout.setVerticalGroup(
            contentEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(contentEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private String firstRow;
    private String secondRow;

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed

        Collection<? extends ResourceCreator> r = Lookup.getDefault().lookupAll(ResourceCreator.class);

        for (ResourceCreator resourceCreator : r) {
            if (resourceCreator instanceof FileResourceCreator) {
                ResourcePool<File> rp = resourceCreator.createResourcePool();
                if (rp != null) {
                    try {
                        ResourceStore.addResourcePool(rp);
                        jComboBox1.setModel(getResourceComboBoxModel());
                        jComboBox1.setSelectedItem(rp);
                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                    }
                }
            }
        }

    }//GEN-LAST:event_newFileActionPerformed

    private void hasHeaderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hasHeaderItemStateChanged
        updateOutput();
    }//GEN-LAST:event_hasHeaderItemStateChanged

    private void fileTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fileTypeItemStateChanged
        updateOutput();
    }//GEN-LAST:event_fileTypeItemStateChanged

    private void quoteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_quoteItemStateChanged
        updateOutput();
    }//GEN-LAST:event_quoteItemStateChanged

    private final ComboBoxModel<ResourcePool<File>> getResourceComboBoxModel() {
        return (ComboBoxModel<ResourcePool<File>>) ResourceVisualUtil.getResourceComboBox(File.class, type == ExecutorType.READER ? new ResourcePoolQualifier<File>() {
            @Override
            public boolean validate(ResourcePool<File> resource) {
                try (Resource<File> f = resource.getResource()) {
                    return f.get().exists();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                    return false;
                }
            }
        } : null);
    }

    private String lastSelectedFile;

    private void update(ResourcePool pool) {
        if (pool != null) {
            try (Resource<File> r = pool.getResource()) {
                if (!r.get().getPath().equals(lastSelectedFile)) {
                    if (type == ExecutorType.READER) {
                        new Thread(new Runnable() {

                            @Override
                            public void run() {
                                try (Resource<File> r = pool.getResource()) {
                                    File f = r.get();
                                    lastSelectedFile = f.getPath();
                                    try (FileInputStream fio = new FileInputStream(f)) {
                                        LineIterator lineIterator = IOUtils.lineIterator(new InputStreamReader(fio));
                                        if (lineIterator.hasNext()) {
                                            firstRow = lineIterator.nextLine();
                                        }
                                        if (lineIterator.hasNext()) {
                                            secondRow = lineIterator.nextLine();
                                        }

                                        updateOutput();
                                    }
                                } catch (Exception ex) {
                                    Exceptions.printStackTrace(ex);
                                }
                            }
                        }).start();
                    } else if (type == ExecutorType.WRITER) {
                        updateOutput();
                    }
                }
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        ResourcePool<File> pool = (ResourcePool<File>) jComboBox1.getSelectedItem();
        update(pool);

    }//GEN-LAST:event_jComboBox1ActionPerformed

    public void updateOutput() {
        try {
            boolean haveHeader = this.hasHeader.isSelected();
            FileType selectedFileType = (FileType) fileType.getSelectedItem();
            if (selectedFileType == null) {
                selectedFileType = FileType.MANUAL;
            }

            Quote q = (Quote) this.quote.getSelectedItem();
            if (this.type == ExecutorType.READER && selectedFileType != FileType.MANUAL) {
                String line = haveHeader ? secondRow : firstRow;

                if (line == null || line.isEmpty()) {
                    throw new Exception("input line is empty, can't parse");
                }

                StrTokenizer header = new StrTokenizer();

                if (haveHeader) {
                    header = tokenizer(firstRow, selectedFileType.getSplitChar(), q.getQuoteString());
                }
                StringBuilder sb = new StringBuilder(line.length() * 3 / 2);
                int i = 0;
                for (String s : tokenizer(line, selectedFileType.getSplitChar(), q.getQuoteString()).getTokenArray()) {
                    String normalizeFieldKey = DataUtil.normalizeFieldKey(haveHeader && header.hasNext() ? header.nextToken() : "FIELD_" + i, sampleInput);
                    if (i != 0) {
                        sb.append(selectedFileType.getSplitChar());
                    }
                    sb.append(DataUtil.getVariableString(normalizeFieldKey));
                    i++;
                }
                contentArea.setText(sb.toString());
            } else if (this.type == ExecutorType.WRITER) {
                StringBuilder sb = new StringBuilder(sampleInput.getEntrySet().size() * 10);
                for (Entry<String, Object> val : sampleInput.getEntrySet()) {
                    if(sb.length()!=0){
                        sb.append(selectedFileType.getSplitChar());
                    }
                    sb.append(DataUtil.getVariableString(val.getKey()));
                }
                contentArea.setText(sb.toString());
            }
        } catch (Exception e) {
            Exceptions.printStackTrace(e);
        }
    }

    private StrTokenizer tokenizer(String s, char delim, String quote) {
        StrTokenizer t = new StrTokenizer(s);
        t.setDelimiterMatcher(StrMatcher.charMatcher(delim));
        t.setQuoteMatcher(quote.isEmpty() ? StrMatcher.noneMatcher() : StrMatcher.charMatcher(quote.charAt(0)));
        t.setIgnoredMatcher(StrMatcher.trimMatcher());
        t.setTrimmerMatcher(StrMatcher.trimMatcher());
        t.setEmptyTokenAsNull(false);
        t.setIgnoreEmptyTokens(false);
        return t;
    }

//    public PrimitiveBlockProvider getVisualNode() throws Exception {
//
//        SimpleFileId idMapping = (SimpleFileId) ((DataVisualView) dataPanel).getIdMapping();
//        if (idMapping != null) {
//            if (requiredType == Reader.class) {
//                return new FileReader("reading from file", idMapping);
//            } else if (requiredType == Writer.class) {
//                return new FileWriter("write to file", idMapping);
//            }
//        }
//        return null;
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentEditorPanel;
    private javax.swing.JComboBox<FileType> fileType;
    private javax.swing.JCheckBox hasHeader;
    private javax.swing.JComboBox<ResourcePool<File>> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton newFile;
    private javax.swing.JComboBox<Quote> quote;
    // End of variables declaration//GEN-END:variables

    @Override
    public String prepareValidation() {
        return "File Connector Details";
    }

    @Override
    public DescriptiveExecutionUnit validateConnector(ProgressHandle handle) throws Exception {
        ResourcePool<File> pool = (ResourcePool<File>) jComboBox1.getSelectedItem();
        String line = contentArea.getText();
        boolean haveHeader = this.hasHeader.isSelected();
        
        Quote q = (Quote) this.quote.getSelectedItem();
        if (type == ExecutorType.READER) {
            return new FileExecutionUnit("reading file ", FileAdapter.createReader(pool, getMapping(line), haveHeader, line, 1024,q.getQuoteString()), sampleInput);
        } else if (type == ExecutorType.WRITER) {
            return new FileExecutionUnit("writing to file", FileAdapter.createWriter(pool, null, haveHeader, line, 1024, q.getQuoteString(),false), sampleInput);
        }
        throw new UnsupportedOperationException("");
    }

    @Override
    public void finishValidation() {

    }

    private MappingHelper<String> getMapping(String line) throws Exception {
        MappingHelper<String> helper = new MappingHelper();
        Quote q = (Quote) this.quote.getSelectedItem();
        FilePatternParser parser=new FilePatternParser(line, q.getQuoteString());
        Data data = parser.parse(secondRow, null);
        StrSubstitutor substitutor = new StrSubstitutor(new StrLookup() {
            @Override
            public String lookup(String key) {
                //TODO detect value from input lines we have
                Object value = data.getValue(key);
                Type type = TypeUtil.detectType(value);

                helper.addIdMap(key, key, type.getConverter(), ValueGroupingStrategy.SINGLE, value);
                return "";
            }
        });
        substitutor.replace(line);
        return helper;
    }

    public static enum FileType {

        CSV(',', "CSV"),
        TSV('\t', "TSV"),
        MANUAL(' ', "Manual");

        private final char splitChar;
        private final String displayString;

        private FileType(char splitChar, String displayString) {
            this.splitChar = splitChar;
            this.displayString = displayString;
        }

        public char getSplitChar() {
            return splitChar;
        }

        @Override
        public String toString() {
            return displayString;
        }

    }

    public static enum Quote {

        QUOTE('"'),
        SQUOTE('\''),
        SPACE(null, "none"),;

        private final String quoteString;
        private final String displayString;

        private Quote(char splitString) {
            this(splitString, String.valueOf(splitString));
        }

        private Quote(Character splitString, String displayString) {
            this.quoteString = ObjectUtils.toString(splitString);
            this.displayString = displayString;
        }

        public String getQuoteString() {
            return quoteString;
        }

        @Override
        public String toString() {
            return displayString;
        }

    }

}
