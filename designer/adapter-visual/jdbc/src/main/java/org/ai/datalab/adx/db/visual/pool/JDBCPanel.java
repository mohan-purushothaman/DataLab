/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.adx.db.visual.pool;

import java.awt.Color;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingUtilities;
import org.netbeans.api.db.explorer.ConnectionManager;
import org.netbeans.api.db.explorer.DatabaseConnection;
import org.ai.datalab.core.resource.Resource;
import org.ai.datalab.core.resource.ResourcePool;
import org.ai.datalab.adx.db.visual.NB_JDBC_ResourcePool;
import org.netbeans.api.db.explorer.ConnectionListener;

public final class JDBCPanel extends javax.swing.JPanel {

    private final boolean readOnly;

    public JDBCPanel() {
        this(false, null);
    }

    public JDBCPanel(boolean readOnly, ResourcePool pool) {
        this.readOnly = readOnly;
        initComponents();
        ConnectionManager.getDefault().addConnectionListener(new ConnectionListener() {
            @Override
            public void connectionsChanged() {
                dbConn.setModel(getConnectionModel());
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        testConn = new javax.swing.JButton();
        connTestStatus = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxSize = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        queryTimeout = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        dbConn = new javax.swing.JComboBox<>();
        newConn = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testConn, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.testConn.text")); // NOI18N
        testConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(connTestStatus, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.connTestStatus.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.jLabel3.text")); // NOI18N

        maxSize.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));
        maxSize.setEnabled(!readOnly);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.jLabel6.text")); // NOI18N

        queryTimeout.setModel(new javax.swing.SpinnerNumberModel(60, 1, null, 1));
        queryTimeout.setEnabled(!readOnly);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.jLabel7.text")); // NOI18N

        dbConn.setModel(getConnectionModel());

        org.openide.awt.Mnemonics.setLocalizedText(newConn, org.openide.util.NbBundle.getMessage(JDBCPanel.class, "JDBCPanel.newConn.text")); // NOI18N
        newConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(testConn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(connTestStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxSize, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(queryTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                            .addComponent(dbConn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(newConn)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabel6});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dbConn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newConn))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(queryTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testConn)
                    .addComponent(connTestStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabel6, jLabel7});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private final AtomicReference<ResourcePool> ref = new AtomicReference();

    private void testConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnActionPerformed
        // TODO add your handling code here:
        connTestStatus.setForeground(Color.BLUE);
        connTestStatus.setText("testing ....");
        String conn = (String) this.dbConn.getSelectedItem();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    int maxSizeValue = (Integer) maxSize.getValue();
                    //TODO query timeout setting
                    int queryTimeoutValue = (Integer) queryTimeout.getValue();
                    ResourcePool<Connection> p = new NB_JDBC_ResourcePool(conn, maxSizeValue);
                    try (Resource<Connection> r = p.getResource()) {
                        try (Connection c = r.get()) {
                            SwingUtilities.invokeLater(new Runnable() {
                                @Override
                                public void run() {
                                    connTestStatus.setForeground(Color.green);
                                    connTestStatus.setText("Connection Successful");
                                }
                            });
                        }
                        ref.set(p);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            connTestStatus.setForeground(Color.red);
                            connTestStatus.setText(String.valueOf(ex.getMessage()));
                        }
                    });
                }

            }

        }).start();

    }//GEN-LAST:event_testConnActionPerformed

    private void newConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConnActionPerformed
        ConnectionManager.getDefault().showAddConnectionDialog(null);
    }//GEN-LAST:event_newConnActionPerformed

    public ComboBoxModel<String> getConnectionModel() {
        List<String> conn = new LinkedList<>();
        for (DatabaseConnection db : ConnectionManager.getDefault().getConnections()) {
            conn.add(db.getName());
        }
        return new DefaultComboBoxModel<>(conn.toArray(new String[0]));

    }

    public ResourcePool getResourcePool() {
        return ref.get();
    }

    void load() {
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(JDBCPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(JDBCPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        // Example:
        // Preferences.userNodeForPackage(JDBCPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(JDBCPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connTestStatus;
    private javax.swing.JComboBox<String> dbConn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner maxSize;
    private javax.swing.JButton newConn;
    private javax.swing.JSpinner queryTimeout;
    private javax.swing.JButton testConn;
    // End of variables declaration//GEN-END:variables
}
