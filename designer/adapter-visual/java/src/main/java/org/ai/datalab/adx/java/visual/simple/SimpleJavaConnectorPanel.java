/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ai.datalab.adx.java.visual.simple;

import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JEditorPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Position;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import org.ai.datalab.adx.java.core.JavaExecutorProvider;
import org.ai.datalab.adx.java.core.simple.SimpleJavaCodeGenerator;
import org.ai.datalab.adx.java.util.JavaUtil;
import org.ai.datalab.adx.java.visual.core.DataLabClassPathProvider;
import org.ai.datalab.adx.java.visual.JavaConnectorPanel;
import org.ai.datalab.adx.java.visual.core.ErrorAnnotation;
import org.ai.datalab.adx.java.visual.core.JavaVisualUtil;
import org.ai.datalab.core.Data;
import org.ai.datalab.core.Executor;
import org.ai.datalab.core.adx.CodeSegment;
import org.ai.datalab.core.executor.ExecutorType;
import org.ai.datalab.core.executor.Processor;
import org.ai.datalab.core.executor.Reader;
import org.ai.datalab.core.misc.SimpleData;
import org.ai.datalab.designer.panels.VisualNodeValidator;
import org.ai.datalab.visual.impl.widget.DescriptiveExecutionUnit;
import org.mdkt.compiler.CompilationException;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.modules.editor.NbEditorDocument;
import org.openide.text.Annotation;

/**
 *
 * @author Mohan Purushothaman
 */
public class SimpleJavaConnectorPanel extends VisualNodeValidator {

    private final ExecutorType type;
    private final Data sampleInput;
    private final SimpleJavaCodeGenerator codeGenerator;
    private final String className;

    private final JEditorPane codePane;

    public SimpleJavaConnectorPanel(SimpleJavaCodeGenerator generator, ExecutorType type, Data sampleInput) {
        this.type = type;
        this.sampleInput = sampleInput;
        this.codeGenerator = generator;
        this.className = JavaUtil.getFileName(codeGenerator.getClazzName());
        initComponents();
        codePane = JavaVisualUtil.getLatestEditor();
        DataLabClassPathProvider.updateCodeGenerator(generator);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codePanel = JavaVisualUtil.getSimpleJavaEditor(codeGenerator, className);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SimpleJavaConnectorPanel.class, "SimpleJavaConnectorPanel.jLabel1.text")); // NOI18N

        codePanel.setMinimumSize(new java.awt.Dimension(100, 100));
        codePanel.setPreferredSize(new java.awt.Dimension(200, 260));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                    .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String prepareValidation() {
        return "Validating Simple Java Connector";
    }

    private final List<ErrorAnnotation> errorAnnotations = new LinkedList<>();

    @Override
    public DescriptiveExecutionUnit validateConnector(ProgressHandle handle) throws Exception {
        NbEditorDocument doc = (NbEditorDocument) codePane.getDocument();
        String content = codePane.getText();
        int index = codeGenerator.findExecuteIndex(codeGenerator.getSourceContentExcludingExecute());
        codeGenerator.getCodeSegmentHandler().setCodeSegment(CodeSegment.EXECUTE, content);

        for (ErrorAnnotation e : errorAnnotations) {
            doc.removeAnnotation(e);
        }
        errorAnnotations.clear();
        try {
            Class<Executor> clazz = JavaUtil.createClass(codeGenerator.getClazzName(), codeGenerator.generate(), codeGenerator.getLibList());
            Executor e = clazz.newInstance();
            Data sampleOutput = getSampleData(e);
            JavaExecutorProvider javaExecutorProvider = new JavaExecutorProvider(type, codeGenerator, sampleOutput == null ? null : JavaConnectorPanel.getDummyMapping(sampleOutput));

            return new SimpleJavaExecutionUnit("simple java " + type.name().toLowerCase(), javaExecutorProvider, sampleInput);
        } catch (CompilationException e) {
            DiagnosticCollector diagnostics = e.getDiagnostics();

            if (diagnostics != null) {
                for (Object d : diagnostics.getDiagnostics()) {
                    Diagnostic d1 = (Diagnostic) d;
                    errorAnnotations.add(new ErrorAnnotation(d1));
                }
                for (ErrorAnnotation errorAnnotation : errorAnnotations) {
                    doc.addAnnotation(createPosition(doc, (int) errorAnnotation.getDiagnostic().getPosition() - index), -1, errorAnnotation);
                }
            }

            throw e;
        } catch (Exception e) {
            throw e;
        }
    }

    @Override
    public void finishValidation() {

    }

    private Data getSampleData(Executor e) throws Exception {

        switch (type) {
            case READER:
                return ((Reader) e).readData(null);
            case PROCESSOR:
                return ((Processor) e).processData(new Data[]{SimpleData.cloneData(sampleInput)}, null)[0];
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel codePanel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private Position createPosition(NbEditorDocument doc, int expectedPosition) throws BadLocationException {
        return doc.createPosition(Math.max(0, Math.min(expectedPosition, doc.getLength())));
    }
}
